#include "ResponseState.hpp"
#include "Reqeust.hpp"

////////////////////////////////////////////////////////////////////////////////

/* Static member initialization */
std::map<int, std::string> ResponseState::_scenarios;
bool	ResponseState::_isScenarioInitialized = false;

////////////////////////////////////////////////////////////////////////////////
/* Constructor */

ResponseState::ResponseState(Request& reqeust) : _request(reqeust) {
}

////////////////////////////////////////////////////////////////////////////////
/* Static Methods */

std::map<int, std::string>& ResponseState::getScenarios() {
	_initDefaultScenario();
    return (_scenarios);
}

void	ResponseState::addNewScenario(int key, const std::string& value) {
	if (_scenarios.find(key) == _scenarios.end()) {
		_scenarios[key] = value;
	}
}

void	ResponseState::_initDefaultScenario() {
	if (_isScenarioInitialized) {
		return ;
	}
	_scenarios[100] = "Continue";
	_scenarios[200] = "OK";
	_scenarios[301] = "Moved Permanently";
	_scenarios[302] = "Found";
	_scenarios[303] = "See Other";
	_scenarios[307] = "Temporary Redirect";
	_scenarios[308] = "Permanent Redirect";
	_scenarios[400] = "Bad Request";
	_scenarios[401] = "Unauthorized";
	_scenarios[403] = "Forbidden";
	_scenarios[404] = "Not Found";
	_scenarios[500] = "Internal Server Error";
	_isScenarioInitialized = true;
}



////////////////////////////////////////////////////////////////////////////////
// Informational
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Success
////////////////////////////////////////////////////////////////////////////////

SuccessState::SuccessState(Request& request) : ResponseState(request) {

}

////////////////////////////////////////////////////////////////////////////////
//  Redirect
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Error
////////////////////////////////////////////////////////////////////////////////
